#summary Describe la clase ConectorBase y su uso.

= La clase ConectorBase =

Esta es una clase abstracta que debe ser extendida por las clases de _Utilerias_ de conexiones a los SGBD. Se encarga de establecer las operaciones básicas que deben ser implementadas, así como administrar los parámetros de conexión al SGBD y la instancia de conexión creada.-

Implementa la interfaz System.IDisposable, lo que permite que la instancia creada pueda ser utilizada en un ámbito de comando _using_.-

= Constructores =

`  `*ConectorBase(*{{{cCadenaConexionParam}}}*):*
  * _cCadenaConexionParam:_ ({{{System.String}}}) Cadena de conexión para acceder a la base de datos. Ver [http://www.connectionstrings.com/ ejemplos] de cadenas.-
`  `*ConectorBase(*{{{cUsuarioParam, cContrasenaParam, cServidorParam, cCatalogoParam, nPuertoParam, cServicioParam}}}*):* 
  * _cUsuarioParam:_ ({{{System.String}}}) Id de Usuario de SGBD.-
  * _cContrasenaParam:_ ({{{System.String}}}) Contrasena del Usuario.-
  * _cServidorParam:_ ({{{System.String}}}) Nombre o direccion del Servidor SGBD.-
  * _cCatalogoParam:_ ({{{System.String}}}) Nombre del Catalogo/Esquema de BDD.-
  * _nPuertoParam:_ ({{{System.Int32}}}) Puerto de escucha del servicio SGBD.-
  * _cServicioParam:_ ({{{System.String}}}) Nombre del Servicio de SGBD.-

= Campos =
== Públicos ==
  * *ERROR_NO_HAY_FILAS:* ({{{System.String}}}) Constante de mensaje de consulta sin filas devueltas como resultado.-
  * *MARCADOR_PARAMETRO:* ({{{System.Char}}}) Estatico. Marca de nombre de parametros de comandos SQL. Valor por defecto '_:_' (dos puntos).-
  * *oConexion:* ({{{System.Data.Common.DbConnection}}}) Almacena la instancia de la conexión establecida hacia el SGBD.-


= Propiedades =
== Protegidas ==
  * *`_`cServidor:* ({{{System.String}}}) Devuelve o establece el nombre o la direccion del servidor del SBGD.-
  * *`_`nPuerto:* ({{{System.Int32}}}) Devuelve o establece el puerto de escucha del servicio.-
  * *`_`cServicio:* ({{{System.String}}}) Devuelve o establece el nombre del servicio del SBGD.-
  * *`_`cUsuario:* ({{{System.String}}}) Devuelve o establece el nombre del usuario del SBGD.-
  * *`_`cContrasena:* ({{{System.String}}}) Devuelve o establece la contraseña del usuario.-
  * *`_`cCatalogo:* ({{{System.String}}}) Devuelve o establece el nombre del Catálogo/Esquema de Base de Datos.-
  * *`_`bConectado:* ({{{System.Boolean}}}) Devuelve o establece el marcador de la conexión abierta.-
  * *`_`cCadenaConexion:* ({{{System.String}}}) Devuelve o establece la cadena de conxión utilizada.-

== Públicas ==
  * *bMostrarSQL:* ({{{System.Boolean}}}) Devuelve o establece el valor de marcador para desplegar las cadenas de los comandos ejecutados en el servidor.-
  * *nTiempoComandos:* ({{{System.Int32}}}) Devuelve o establece el tiempo de espera para ejecución de comandos.-


= Métodos =
== Protegidos ==
  * *`_`Mostrar_SQL(*{{{cSentenciaSQL}}}*):* ({{{System.Void}}}) Muestra la cadena parametro en la consola. Sólo si {{{bMostrarSQL = true}}}.-
    * _cSentenciaSQL_: ({{{System.String}}}) Sentencia sql a desplegar.-
  * *`_`Mostrar_SQL(*{{{oComando}}}*):* ({{{System.Void}}}) Muestra la cadena del comando sql parametro. Sólo si {{{bMostrarSQL = true}}}.-
    * _oComando_: ({{{System.Data.Common.DbCommand}}}) Instancia de _DbCommand_ que contiene la sentencia sql a desplegar.-


== Públicos ==
  * *lConectar():* ({{{List<System.Object>}}}) Abstracto. Abre la conexion a la base de datos y devuelve el resultado de la operacion en una lista de objetos.-
  * *lDesconectar(*{{{sender}}}*):* ({{{List<System.Object>}}}) Abstracto. Cierra la conexión activa y devuelve el resultado de la operacion en una lista de objetos.-
    * _sender_: ({{{System.Object}}}) Objeto que efectúa la llamada al metodo.-
  * *lEjecutar_sentencia(*{{{cSentenciaSQL, dicValores}}}*):* ({{{List<System.Object>}}}) Abstracto. Ejecuta la sentencia sql parámetro y devuelve el resultado de la operacion en una lista de objetos.-
    * _cSentenciaSQL_: ({{{System.String}}}) Sentencia SQL a ejecutar.-
    * _dicValores_:  ({{{Dictionary<string, object>}}}) Diccionario de claves y valores parametros de la sentencia.-
  * *lEjecutar_consulta(*{{{cConsultaSQL, dicValores}}}*):* ({{{List<System.Object>}}}) Abstracto. Ejecuta la consulta sql y devuelve un DataTable como segundo elemento de la lista de resultados.-
    * _cConsultaSQL_: ({{{System.String}}}) Consulta SQL a ejecutar.-
    * _dicValores_:  ({{{Dictionary<string, object>}}}) Diccionario de claves y valores parametros de la consulta.-
  * *lEjecutar_escalar(*{{{cConsultaSQL, dicValores}}}*):* ({{{List<System.Object>}}}) Abstracto. Ejecuta la consulta sql y devuelve un unico objeto, que representa al valor de la primera columna de la primera fila devuelta por la consulta, como segundo elemento de la lista de resultados.-
    * _cConsultaSQL_: ({{{System.String}}}) Consulta SQL a ejecutar.-
    * _dicValores_:  ({{{Dictionary<string, object>}}}) Diccionario de claves y valores parametros de la consulta.-
  * *lEjecutar_procedimiento(*{{{cProcedimiento, dicValores}}}*):* ({{{List<System.Object>}}}) Abstracto. Ejecuta el procedimiento almacenado y devuelve el resultado de la operacion en una lista de objetos.-
    * _cProcedimiento_: ({{{System.String}}}) Procedimiento almacenado a ejecutar.-
    * _dicValores_:  ({{{Dictionary<string, object>}}}) Diccionario de claves y valores parámetros del procedimiento.-
  * *Set_autocommit(*{{{bParam}}}*):* ({{{System.Void}}}) Abstracto. Establece el método de Autoconfirmación de transacciones.-
    * _bParam_: ({{{System.Boolean}}}) Valor a asignar. Si es {{{true}}} todos los comandos se confirmarán apenas hayan terminados su ejecución en forma exitosa, sino, se ejecutará un _rollback_ automático.-
  * *lIniciar_transaccion():* ({{{List<System.Object>}}}) Abstracto. Inicia una transacción de base de datos y devuelve el resultado de la operacion en una lista de objetos.-
  * *lConfirmar_transaccion():* ({{{List<System.Object>}}}) Abstracto. Confirma una transaccion activa y devuelve el resultado de la operacion en una lista de objetos.-
  * *lRevertir_transaccion():* ({{{List<System.Object>}}}) Abstracto. Revierte una transaccion activa y devuelve el resultado de la operacion en una lista de objetos.-
  * *ToString():* ({{{System.String}}}) Sobreescrito. Devuelve la representación de de cadena de la instancia.-
  * *Dispose():* ({{{System.Void}}}) Sobreescrito. Ejecuta la liberación de todos los recursos creados por la instancia.-